import os
import time
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from prostruc.metrics import calculate_tm_score, calculate_qmean, get_qmean_result


def validate(modeled_structures_directory, email, job_name):
    model_scores = []

    print("[*] Validating models using TM-Score, RMSD, and QMEANDisCO")

    if os.path.exists(modeled_structures_directory):
        for path, directories, files in os.walk(modeled_structures_directory):
            for target_model in files:
                if target_model.endswith(".pdb"):  # Ensure it's a PDB file
                    target_model_filepath = os.path.join(modeled_structures_directory, target_model).replace("\\","/")
                    try:
                        # Calculate TM-Score
                        rmsd_tmscore_result = calculate_tm_score(target_model=target_model_filepath, validation_model=f"{job_name}_validation_model")
                        tm_score = rmsd_tmscore_result["tm_score_chain2"]
                        rmsd_score = rmsd_tmscore_result['rmsd']
                        print(f"{target_model}: TM-Score = {tm_score} : RMSD = {rmsd_score}" )
                    except Exception as e:
                        print(f"Error validating {target_model} using TMScore: {str(e)}")
                        tm_score = None  # Set TM-Score to None if there was an error
                        rmsd_score = None

                    try:
                        # Calculate QMEAN score
                        result_url = calculate_qmean(target_model=target_model_filepath, job_name=job_name, email=email)
                        time.sleep(150)  # Consider optimizing this waiting time
                        qmean_score = get_qmean_result(results_url=result_url)
                        print(f"{target_model}: QMEAN Score = {qmean_score} :: {result_url.split('.json')[0]}")
                    except Exception as e:
                        print(f"Error validating {target_model} using QMEAN: {str(e)}")
                        qmean_score = None  # Set QMEAN score to None if there was an error

                    # Append TM-Score and QMEAN score to the list
                    model_scores.append((target_model_filepath, tm_score,rmsd_score, qmean_score))

        # Sort models by QMEAN score (if available), or TM-Score as fallback
        model_scores.sort(key=lambda x: (x[2] if x[2] is not None else 0, x[1] if x[1] is not None else 0), reverse=True)

        # Select the top 5 models
        best_performing_models = model_scores[:5]

        # Generate report after validation
        generate_validation_report(f"{job_name}_validation_report.pdf", best_performing_models, job_name, email)

        return {
            'state': True,
            'models': best_performing_models
        }
    else:
        print(f"Error: Modeled structures directory '{modeled_structures_directory}' does not exist.")
        return {
            'state': False,
            'models': []
        }


def generate_validation_report(output_pdf, best_models, job_name, email):
    # Create PDF document
    doc = SimpleDocTemplate(output_pdf, pagesize=letter)
    elements = []

    # Styles
    styles = getSampleStyleSheet()
    title_style = styles['Title']
    normal_style = styles['Normal']

    # Title
    report_title = f"Validation Report for Job: {job_name}"
    elements.append(Paragraph(report_title, title_style))
    elements.append(Spacer(1, 12))

    # Add timestamp and email
    current_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    elements.append(Paragraph(f"Generated by: Prostruc", normal_style))
    elements.append(Paragraph(f"Date and Time: {current_time}", normal_style))
    elements.append(Paragraph(f"Report sent to: {email}", normal_style))
    elements.append(Spacer(1, 12))

    # Add table for best-performing models
    if best_models:
        elements.append(Paragraph("Best Performing Models", styles['Heading2']))
        table_data = [['Model File', 'TM-Score',"RMSD", 'QMEAN Score']]
        for model_path, tm_score,rmsd_score, qmean_score in best_models:
            table_data.append([
                model_path.split('/')[1],
                f"{tm_score:.2f}" if tm_score is not None else "N/A",
                f"{rmsd_score:.2f}" if rmsd_score is not None else "N/A",
                f"{qmean_score:.2f}" if qmean_score is not None else "N/A"
            ])

        table = Table(table_data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        elements.append(table)
    else:
        elements.append(Paragraph("No models were validated successfully.", normal_style))

    # Build the document
    doc.build(elements)
    print(f"INFO: Report generated: {output_pdf}")



# validate(modeled_structures_directory="modeled_structures",email="senawilson123@gmail.com",job_name="pro4")
# import os
# import time
# from metrics import calculate_tm_score, calculate_qmean, get_qmean_result
#
#
# def validate(modeled_structures_directory,email,job_name):
#     best_performing_models = []
#     model_qmean_scores = []
#     #validation_model_path = os.path.join("/home/user1/prostruc/code",f"{job_name}_validation_model")
#     print("[*] Validating models using RMSD and TMScore")
#     if os.path.exists(modeled_structures_directory):
#         for path,directories,files in os.walk(modeled_structures_directory):
#              for target_model in files:
#                  target_model_filepath = os.path.join(modeled_structures_directory,target_model)
#                  rmsd_tmscore_result = calculate_tm_score(target_model=target_model_filepath,validation_model=f"{job_name}_validation_model")
#                  print(f"{target_model}: {rmsd_tmscore_result}")
#                  # if rmsd_tmscore_result["tm_score_chain2"] < 0.5:
#                  #     os.remove(path=target_model_filepath)
#                  #     print(f"{target_model} deleted")
#
#
#         print("[*] Validating models using QMEAN")
#         for path,directories,files in os.walk(modeled_structures_directory):
#             for target_model in files:
#                 target_model_filepath = os.path.join(modeled_structures_directory,target_model)
#                 result_url = calculate_qmean(target_model=target_model_filepath,job_name=job_name,email=email)
#                 time.sleep(150)
#                 qmean = get_qmean_result(results_url=result_url)
#                 print(f"{target_model}: {qmean} :: {result_url}")
#                 if qmean > float(0.6):
#                     # os.remove(path=target_model_filepath)
#                     # print(f"{target_model} deleted")
#                     pass
#                 else:
#                     model_qmean_scores.append((target_model_filepath,qmean))
#
#         # Sort the models
#         model_qmean_scores.sort(key=lambda x: x[1], reverse=True)
#         # Select the top 5 models
#         best_performing_models = [model[0] for model in model_qmean_scores[:5]]
#
#         return {
#             'state': True,
#             'models': best_performing_models
#         }
