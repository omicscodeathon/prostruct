from Bio.SeqUtils.ProtParam import ProteinAnalysis
# from reportlab.lib.pagesizes import A4
# from reportlab.lib import colors
# from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
# from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
# from reportlab.lib.units import inch
# from datetime import datetime

def basic_analysis(sequence):
    try:
        analysis_result = ProteinAnalysis(sequence)
        result = {
            'Length': (analysis_result.length, 'Amino Acids'),
            'Molecular Weight': (round(analysis_result.molecular_weight(), 2), 'Daltons'),
            'Isoelectric Point': (round(analysis_result.isoelectric_point(), 2), 'pI (Isoelectric Point)'),
            'Instability Index': (round(analysis_result.instability_index(), 2), ''),
            'Aromaticity': (round(analysis_result.aromaticity(), 2), ''),
            'Gravy': (round(analysis_result.gravy(), 2), ''),
            'Secondary Structure Fraction': (tuple(round(x, 2) for x in analysis_result.secondary_structure_fraction()), 'Fraction (α-helix, β-sheet, coil)')
        }
        return result
    except Exception as error:
        print(error)
        return None

# def generate_pdf_report(sequence, analysis_result, filename="sequence_analysis_report.pdf"):
#     # Define the document
#     doc = SimpleDocTemplate(filename, pagesize=A4)
#
#     # Set up styles
#     styles = getSampleStyleSheet()
#     title_style = ParagraphStyle(
#         name='Title',
#         fontSize=24,
#         leading=28,
#         alignment=1,  # Center alignment
#         textColor=colors.HexColor("#0033A0"),  # Nice shade of blue
#         spaceAfter=20,
#     )
#     subtitle_style = ParagraphStyle(
#         name='Subtitle',
#         fontSize=16,
#         leading=20,
#         textColor=colors.HexColor("#0033A0"),  # Nice shade of blue
#         spaceAfter=15,
#     )
#     body_style = ParagraphStyle(
#         name='Body',
#         fontSize=12,
#         leading=14,
#         textColor=colors.HexColor("#333333"),
#         spaceAfter=10,
#     )
#     table_style = TableStyle([
#         ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#0033A0")),  # Blue header
#         ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
#         ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
#         ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
#         ('FONTSIZE', (0, 0), (-1, 0), 12),
#         ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
#         ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor("#f7f7f7")),  # Light gray background
#         ('GRID', (0, 0), (-1, -1), 1, colors.black),
#     ])
#
#     # Title, Date, and Introduction
#     elements = []
#     elements.append(Paragraph("Sequence Analysis Report", title_style))
#     current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#     elements.append(Paragraph(f"Report generated on: {current_datetime}", body_style))
#     elements.append(Spacer(1, 0.2 * inch))
#     elements.append(Paragraph("This report provides a detailed analysis of the given protein sequence.", body_style))
#     elements.append(Spacer(1, 0.2 * inch))
#
#     # Sequence Information
#     elements.append(Paragraph("Sequence Details", subtitle_style))
#     elements.append(Spacer(1, 0.1 * inch))
#     elements.append(Paragraph(f"Sequence: {sequence}", body_style))
#     elements.append(Spacer(1, 0.2 * inch))
#
#     # General analysis results with units in a separate column
#     data = [['Parameter', 'Value', 'Unit']]
#     for key, (value, unit) in analysis_result.items():
#         if isinstance(value, (tuple, list)):
#             data.append([key, ', '.join(map(str, value)), unit])  # Convert list/tuple to string
#         else:
#             data.append([key, str(value), unit])  # Convert float or other types to string
#
#     # Convert the data into a table for the general analysis
#     general_table = Table(data)
#     general_table.setStyle(table_style)
#     elements.append(general_table)
#
#     # Add footer
#     elements.append(Spacer(1, 0.5 * inch))
#     elements.append(Paragraph("Generated by Prostruc", body_style))
#
#     # Build the PDF document
#     doc.build(elements, onFirstPage=add_header_footer, onLaterPages=add_header_footer)
#
# def add_header_footer(canvas, doc):
#     # Header
#     canvas.saveState()
#     canvas.setFont('Helvetica-Bold', 12)
#     canvas.setFillColor(colors.HexColor("#0033A0"))  # Nice shade of blue
#     canvas.drawString(inch, A4[1] - 0.75 * inch, "Sequence Analysis Report")
#
#     # Footer
#     canvas.setFont('Helvetica', 10)
#     canvas.setFillColor(colors.HexColor("#0033A0"))  # Nice shade of blue
#     canvas.drawString(inch, 0.75 * inch, f"Page {doc.page}")
#     canvas.drawString(A4[0] - inch - 100, 0.75 * inch, "Generated by Prostruc")  # Right-aligned footer text
#     canvas.restoreState()
#

#
# SEQ = "MALWMRLLPLLALLALWGPDPAAAFVNQHLCGSHLVEALYLVCGERGFFYTPKTRREAEDLQVGQVELGGGPGAGSLQPLALEGSLQKRGIVEQCCTSICSLYQLENYCN"
# result = basic_analysis(sequence=SEQ)
# generate_pdf_report(sequence=SEQ, analysis_result=result)

